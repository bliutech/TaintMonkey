from flask import Flask, session, request
# from dataset.cwe_565_reliance_on_cookie_integrity.forge_cookie_class import Cookie_Forger

import secrets


def generate_bytes_secret_key():
    return secrets.token_bytes(32)


BAD_KEY = "supersecretkey"
app = Flask(__name__)
app.secret_key = BAD_KEY

# Fake user database
users = {
    "alice": {"password": "alice123", "role": "user"},
    "admin": {"password": "admin123", "role": "admin"},
}


@app.get("/")
def index():
    return f"Very secure website with no flaws"


@app.post("/login")
def login_send():
    username = request.form["username"]
    password = request.form["password"]

    user = users.get(username)
    if user and user["password"] == password:
        session["username"] = username
        session["role"] = user["role"]
        return f"Welcome, {username}!"
    return "Invalid credentials"


@app.get("/login")
def login_show():
    return """
        <form method="post">
            <h2>Login</h2>
            Username: <input name="username"><br>
            Password: <input name="password" type="password"><br>
            <input type="submit" value="Login">
        </form>
        <br>
        <form action="/logout" method="post">
            <button type="submit">Logout</button>
        </form>
    """


@app.post("/logout")
def logout():
    if not session:
        return "No Session"
    session.clear()
    return """
        <h2>You have been logged out.</h2>
        <form action="/login" method="get">
            <button type="submit">Back to Login</button>
        </form>
    """


# Checks to see if a user is authorized as an admin
def is_admin(this_session, role_string, admin_string):
    return role_string in this_session and this_session.get(role_string) == admin_string


def simulate_bad_secret_key():
    username = session.get("username")
    role = session.get("role")
    if username is None or role is None:
        return False
    app.secret_key = BAD_KEY
    # print(Cookie_Forger.generate_cookie_admin()) #For testing
    session["username"] = username
    session["role"] = role
    return True


@app.get("/insecure/admin")
def insecure_admin():
    if not simulate_bad_secret_key():
        return "No session"
    if not is_admin(session, "role", "admin"):
        return "Access denied"
    return "Welcome, admin!"


def simulate_new_secret_key():
    username = session.get("username")
    role = session.get("role")
    if username is None or role is None:
        return False
    secret_key = generate_bytes_secret_key()  # Monkey-patchy
    app.secret_key = secret_key
    # print(Cookie_Forger.generate_cookie_admin(secret_key=secret_key)) #For testing
    session["username"] = username
    session["role"] = role
    return True


@app.get("/secure/admin")
def secure_admin():
    if not simulate_new_secret_key():
        return "No session"
    if not is_admin(session, "role", "admin"):
        return "Access denied"
    return "Welcome, admin!"


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
