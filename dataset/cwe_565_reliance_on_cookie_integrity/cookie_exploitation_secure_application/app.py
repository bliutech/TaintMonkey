from datetime import timedelta

from flask import Flask, session, request

import secrets


def generate_bytes_secret_key():
    return secrets.token_bytes(32)


def generate_session_id():
    return generate_bytes_secret_key()


def generate_secure_key():
    return generate_bytes_secret_key()


# Monkey patch
def make_app_secure(this_app):
    this_app.permanent_session_lifetime = timedelta(minutes=30)
    this_app.config["SESSION_REFRESH_EACH_REQUEST"] = False
    this_app.config.update(
        SESSION_COOKIE_SECURE=True,
        SESSION_COOKIE_HTTPONLY=True,
        SESSION_COOKIE_SAMESITE="Strict",
    )


def update_session_permanence(this_session):
    this_session.permanent = True


app = Flask(__name__)
app.secret_key = generate_secure_key()
make_app_secure(app)


# Fake user database
users = {
    "alice": {"password": "alice123", "role": "user"},
    "audrey": {"password": "audrey123", "role": "user"},
    "sebastian": {"password": "sebastian123", "role": "user"},
    "admin": {"password": "admin123", "role": "admin"},
}

# Session ids
session_ids = dict()


@app.get("/")
def index():
    return f"Very secure website with no flaws"


@app.post("/login")
def login_send():
    username = request.form["username"]
    password = request.form["password"]

    user = users.get(username)
    if user and user["password"] == password:
        session["username"] = username
        session["role"] = user["role"]
        session_id = generate_session_id()
        session["session id"] = session_id
        session_ids[username] = session_id
        update_session_permanence(session)
        return f"Welcome, {username}!"
    return "Invalid credentials"


@app.get("/login")
def login_show():
    return """
        <form method="post">
            <h2>Login</h2>
            Username: <input name="username"><br>
            Password: <input name="password" type="password"><br>
            <input type="submit" value="Login">
        </form>
        <br>
        <form action="/logout" method="post">
            <button type="submit">Logout</button>
        </form>
    """


@app.post("/logout")
def logout():
    if not session:
        return "No Session"
    session.clear()
    return """
        <h2>You have been logged out.</h2>
        <form action="/login" method="get">
            <button type="submit">Back to Login</button>
        </form>
    """


# Monkey patch
def cookie_valid(session_id_string, user_string, this_session, session_id_database):
    user = this_session.get(user_string)
    session_id = this_session.get(session_id_string)
    if user is None or session_id is None:
        return False

    db_session_id = session_id_database.get(user)
    if db_session_id is None:
        return False

    if session_id != db_session_id:
        return False

    return True


# Checks to see if a user is authorized as an admin
def is_admin(this_session, role_string, admin_string):
    return role_string in this_session and this_session.get(role_string) == admin_string


@app.get("/admin")
def secure_admin():
    if not cookie_valid("session id", "username", session, session_ids):
        return "Your session ID is invalid"
    if not is_admin(session, "role", "admin"):
        return "Access denied"
    return "Welcome, admin!"


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
